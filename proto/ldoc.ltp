// $(ldoc.title)
# local no_spaces = ldoc.no_spaces
# local use_li = ldoc.use_li
# local display_name = ldoc.display_name
# local iter = ldoc.modules.iter
# local function M(txt,item) return ldoc.markup(txt,item,ldoc.plain) end
# local nowrap = ldoc.wrap and '' or 'nowrap'
# if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
    $(ldoc.body) asdasd
# elseif module then -- module documentation
// $(ldoc.module_typename(module)) $(module.name)
// $(M(module.summary,module))
// $(M(module.description,module))
#   if module.usage then
#     local li,il = use_li(module.usage)
#     for usage in iter(module.usage) do
        // $(ldoc.escape(usage))
#     end -- for
#   end -- if usage
#   if module.info then
#     for tag, value in module.info:iter() do
        // $(tag)</strong>: $(M(value,module))
#     end
#   end -- if module.info
# --- currently works for both Functions and Tables. The params field either contains
# --- function parameters or table fields.
# local show_return = not ldoc.no_return_or_parms
# local show_parms = show_return
# for kind, items in module.kinds() do
#   local kitem = module.kinds:get_item(kind)
#  for item in items() do
elements {
#	if no_spaces(kind):lower() == "functions" then
	type: FUNCTION
#	elseif no_spaces(kind):lower() == "fields" then
	type: VARIABLE
#	end
    name: "$(item.name)"
    brief: "$(display_name(item))"
    description: "$(M(ldoc.descript(item),item):gsub("\n", "\\n"):gsub("\r", ""))"
#
#
#
#  if show_parms and item.params and #item.params > 0 then
#   for parm in iter(item.params) do
#     local param,sublist = item:subparam(parm)
#     for p in iter(param) do
    parameters {
#		local name = item:display_name_of(p)
#		local type = item:type_of_param(p)
#		local tp = ldoc.typename(type)
#		local def = item:default_of_param(p)
		name: "$(name)"
		doc: "$(M(item.params.map[p],item):gsub("^%s*(.-)%s*$", "%1"))$(type and type:len() > 0 and " ("..type..")" or "")$(def and " [default:"..def.."]" or "")$(item:readonly(p) and " [readonly]" or "")"
	}
#     end
#   end -- for
#   end -- if params
#
#
#
# if show_return and item.retgroups then
#   local groups = item.retgroups
#   for i,group in ldoc.ipairs(groups) do
#   	for r in group:iter() do
#			local type, ctypes = item:return_type(r)
#			local rt = ldoc.typename(type)
    return_: "$(M(r.text,item))$(type and type:len() > 0 and " ("..type..")" or "")"
#		end -- for r
#	end -- for group
# end -- if returns
#
#
#
#   if item.usage then
#     local li,il = use_li(item.usage)
#     for usage in iter(item.usage) do
        example: "$(ldoc.prettify(usage))"
#     end -- for
#   end -- if usage
#
# -- end elements
}
# end -- for items
# end -- for kinds
# end -- if module
